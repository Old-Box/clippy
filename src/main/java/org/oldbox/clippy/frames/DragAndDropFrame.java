package org.oldbox.clippy.frames;

import io.reactivex.Flowable;
import io.reactivex.schedulers.Schedulers;
import org.oldbox.clippy.Category;
import org.oldbox.clippy.ClippyContext;
import org.oldbox.clippy.ClippyRepository;
import org.oldbox.clippy.NoteEntry;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;

public class DragAndDropFrame extends JFrame {
    private JTextArea droppableTextArea;
    private JPanel panel;
    private JLabel categoryLabel;
    private JLabel messageLabel;

    public DragAndDropFrame(Category category) {
        super();
        configureFrame();

        updateCategoryLabel(category);


        this.droppableTextArea.addCaretListener(e -> {
            if (this.droppableTextArea.getText().length() > 0) {
                this.triggerSave();
            }
        });

        this.add(this.panel);
    }

    private void configureFrame() {
        this.setTitle("Drag and Drop");
        this.setEnabled(true);
        this.setVisible(true);
        this.setSize(300, 300);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    private void updateCategoryLabel(Category category) {
        this.categoryLabel.setText(category.getName());
        if (category.getColor().equals("#FFFFFF")) {
            this.categoryLabel.setForeground(Color.BLACK);
        }
        this.categoryLabel.setBackground(Color.decode(category.getColor()));
    }

    private void triggerSave() {
        Runnable saveLater = this::doSave;
        SwingUtilities.invokeLater(saveLater);
    }

    private void doSave() {
        String content = droppableTextArea.getText();
        String category = categoryLabel.getText();
        NoteEntry entry = new NoteEntry(content);
        ClippyRepository repository = ClippyContext.getInstance().getRepository();
        repository.addEntryToCategory(category, entry);
        droppableTextArea.setText(""); // If this is not desired automatically, then a check box could be added for automatic clean up.
        showSavedMessage();
    }

    private void showSavedMessage() {
        Flowable.fromCallable(() -> {
            messageLabel.setText("Entry saved");
            messageLabel.setForeground(Color.GREEN);
            messageLabel.updateUI();
            Thread.sleep(1000);
            return "Done";
        })
                .subscribeOn(Schedulers.io())
                .observeOn(Schedulers.single())
                .subscribe(
                        (s) -> {
                            messageLabel.setText("");
                            messageLabel.updateUI();
                        },
                        Throwable::printStackTrace
                );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.setBackground(new Color(-12434878));
        panel.setEnabled(true);
        droppableTextArea = new JTextArea();
        panel.add(droppableTextArea, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        categoryLabel = new JLabel();
        categoryLabel.setBackground(new Color(-16777216));
        categoryLabel.setEnabled(true);
        categoryLabel.setForeground(new Color(-1));
        categoryLabel.setText("CATEGORY HERE...");
        panel.add(categoryLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messageLabel = new JLabel();
        messageLabel.setText("");
        panel.add(messageLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        categoryLabel.setLabelFor(droppableTextArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
